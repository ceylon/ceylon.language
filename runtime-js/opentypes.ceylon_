import ceylon.language.meta.declaration {
  FunctionDeclaration, ValueDeclaration,
  ClassDeclaration, InterfaceDeclaration,
  Package, Module, FunctionOrValueDeclaration, VariableDeclaration,
  NestableDeclaration, OpenType, TypeParameter,
  OpenClassType, OpenInterfaceType,
  AnnotatedDeclaration, SetterDeclaration
}
import ceylon.language {
    MetamodelAnnotation=Annotation
}
import ceylon.language.meta.model {
    AppliedInterface = Interface,
    AppliedClass = Class,
    AppliedFunction = Function,
    Method, Value,
    AppliedMember = Member,
    AppliedClassOrInterface = ClassOrInterface,
    AppliedType=Type,
    Attribute, MemberClass, MemberInterface, Variable, VariableAttribute
}

class OpenFunction(shared actual String name, shared actual Package containingPackage) satisfies FunctionDeclaration {

  shared actual AppliedFunction<Return, Arguments> apply<Return=Anything, Arguments=Nothing>(AppliedType<Anything>* typeArguments)
    given Arguments satisfies Anything[] { throw Exception("unimplemented"); }
  shared actual Method<Container, Return, Arguments> memberApply<Container=Nothing, Return=Anything, Arguments=Nothing>(AppliedType<Container> containerType, AppliedType<Anything>* typeArguments)
    given Arguments satisfies Anything[] { throw Exception("unimplemented"); }

    shared actual Boolean defaulted { throw Exception("Implement me!"); }
    shared actual Boolean variadic { throw Exception("Unimplemented"); }
    shared actual Boolean parameter { throw Exception("Unimplemented"); }
    shared actual Boolean annotation { throw Exception("Unimplemented"); }

    shared actual FunctionOrValueDeclaration[] parameterDeclarations { throw Exception("Unimplemented"); }
    shared actual FunctionOrValueDeclaration? getParameterDeclaration(String name) { throw Exception("Unimplemented"); }
  shared actual Annotation[] annotations<out Annotation>()
        given Annotation satisfies MetamodelAnnotation<Annotation> { throw Exception("Unimplemented"); }

  shared actual OpenType openType { throw Exception("Unimplemented"); }
  shared actual TypeParameter[] typeParameterDeclarations { throw Exception("Unimplemented"); }
  shared actual TypeParameter? getTypeParameterDeclaration(String name) { throw Exception("Unimplemented"); }

  shared actual Boolean actual { throw Exception("Unimplemented"); }
  shared actual Boolean formal { throw Exception("Unimplemented"); }
  shared actual Boolean default { throw Exception("Unimplemented"); }
  shared actual Boolean shared { throw Exception("Unimplemented"); }
  shared actual Boolean toplevel { throw Exception("unimplmemented"); }
  shared actual String qualifiedName { return "``containingPackage.name``::``name``"; }
  shared actual NestableDeclaration|Package container { throw Exception("unimplemented"); }
  shared actual Module containingModule => containingPackage.container;
}

class OpenValue(shared default actual String name, shared default actual Package containingPackage) satisfies ValueDeclaration {
  shared actual default Value<Type> apply<Type=Anything>() { throw Exception("unimplemented"); }
  shared actual default Attribute<Container, Type> memberApply<Container=Nothing, Type=Anything>(AppliedType<Container> containerType) { throw Exception("unimplemented"); }
  shared actual Boolean defaulted { throw Exception("Unimplemented"); }
  shared actual Boolean variadic { throw Exception("Unimplemented"); }
  shared actual Boolean parameter { throw Exception("Unimplemented"); }
  shared actual Annotation[] annotations<out Annotation>()
        given Annotation satisfies MetamodelAnnotation<Annotation> { throw Exception("Unimplemented"); }
  shared actual OpenType openType { throw Exception("Unimplemented"); }

  shared actual Boolean actual { throw Exception("Unimplemented"); }
  shared actual Boolean formal { throw Exception("Unimplemented"); }
  shared actual Boolean default { throw Exception("Unimplemented"); }
  shared actual Boolean shared { throw Exception("Unimplemented"); }
  shared actual Boolean toplevel  { throw Exception("Unimplemented"); }
  shared actual String qualifiedName { return "``containingPackage.name``::``name``"; }
  shared actual Package|NestableDeclaration container { throw Exception("unimplemented"); }
  shared actual Module containingModule => containingPackage.container;
}
class OpenVariable(shared actual String name, shared actual Package containingPackage) extends OpenValue(name,containingPackage) satisfies VariableDeclaration {
  shared actual SetterDeclaration setter => OpenSetter(this);
  shared actual Variable<Type> apply<Type=Anything>() { throw Exception("unimplemented"); }
  shared actual VariableAttribute<Container, Type> memberApply<Container=Nothing, Type=Anything>(AppliedType<Container> containerType) { throw Exception("unimplemented"); }
}
class OpenSetter(shared actual VariableDeclaration variable) satisfies SetterDeclaration {}

class OpenClass(shared actual String name, shared actual Package containingPackage) satisfies ClassDeclaration {
  shared actual Boolean abstract { throw Exception("Unimplemented"); }
  shared actual Boolean anonymous { throw Exception("Unimplemented"); }
  shared actual Boolean final { throw Exception("unimplemented"); }
  shared actual Boolean annotation { throw Exception("Unimplemented"); }
  shared actual AppliedClass<Type, Arguments> classApply<Type=Anything, Arguments=Nothing>(AppliedType<Anything>* typeArguments)
        given Arguments satisfies Anything[] { throw Exception("unimplemented"); }

  shared actual MemberClass<Container, Type, Arguments> memberClassApply<Container=Nothing, Type=Anything, Arguments=Nothing>(AppliedType<Container> containerType, AppliedType<Anything>* typeArguments)
        given Arguments satisfies Anything[] { throw Exception("unimplemented"); }
  shared actual AppliedClass<Type> apply<Type=Anything>(AppliedType<Anything>* typeArguments) { throw Exception("Unimplemented"); }
  shared actual AppliedMember<Container, AppliedClassOrInterface<Type>> & AppliedClassOrInterface<Type> 
    memberApply<Container=Nothing, Type=Anything>(AppliedType<Container> containerType, AppliedType<Anything>* typeArguments) { throw Exception("Unimplemented"); }
  shared actual Kind[] memberDeclarations<Kind>() 
            given Kind satisfies NestableDeclaration { throw Exception("Unimplemented"); }
  shared actual Kind[] annotatedMemberDeclarations<Kind, Annotation>() 
            given Kind satisfies NestableDeclaration { throw Exception("Unimplemented"); }
  shared actual Annotation[] annotations<out Annotation>()
        given Annotation satisfies MetamodelAnnotation<Annotation> { throw Exception("Unimplemented"); }
  shared actual Kind? getMemberDeclaration<Kind>(String name) 
            given Kind satisfies NestableDeclaration { throw Exception("Unimplemented"); }
  shared actual OpenType openType { throw Exception("Unimplemented"); }
  shared actual TypeParameter[] typeParameterDeclarations { throw Exception("Unimplemented"); }
  shared actual TypeParameter? getTypeParameterDeclaration(String name) { throw Exception("Unimplemented"); }

  shared actual FunctionOrValueDeclaration[] parameterDeclarations { throw Exception("Unimplemented"); }
  shared actual FunctionOrValueDeclaration? getParameterDeclaration(String name) { throw Exception("Unimplemented"); }

  shared actual OpenClassType? extendedType { throw Exception("Unimplemented"); }
  shared actual OpenInterfaceType[] satisfiedTypes { throw Exception("Unimplemented"); }

  shared actual Boolean actual { throw Exception("Unimplemented"); }
  shared actual Boolean formal { throw Exception("Unimplemented"); }
  shared actual Boolean default { throw Exception("Unimplemented"); }
  shared actual Boolean shared { throw Exception("Unimplemented"); }
  shared actual Boolean toplevel  { throw Exception("Unimplemented"); }
  shared actual String qualifiedName { return "``containingPackage.name``::``name``"; }
  shared actual Package|NestableDeclaration container { throw Exception("unimplemented"); }
  shared actual Module containingModule => containingPackage.container;

  shared actual OpenType[] caseTypes { throw Exception("Unimplemented"); }

  shared actual Boolean isAlias { throw Exception("Unimplemented"); }
}

class OpenInterface(shared actual String name, shared actual Package containingPackage) satisfies InterfaceDeclaration {
  shared actual AppliedInterface<Type> interfaceApply<Type=Anything>(AppliedType<Anything>* typeArguments) { throw Exception("unimplemented"); }
  shared actual MemberInterface<Container, Type> memberInterfaceApply<Container=Nothing, Type=Anything>(AppliedType<Container> containerType, AppliedType<Anything>* typeArguments) { throw Exception("unimplemented"); }
  shared actual AppliedInterface<Type> apply<Type=Anything>(AppliedType<Anything>* typeArguments) { throw Exception("Unimplemented"); }
  shared actual AppliedMember<Container, AppliedClassOrInterface<Type>> & AppliedClassOrInterface<Type> 
    memberApply<Container=Nothing, Type=Anything>(AppliedType<Container> containerType, AppliedType<Anything>* typeArguments) { throw Exception("Unimplemented"); }

  shared actual Kind[] memberDeclarations<Kind>() 
            given Kind satisfies NestableDeclaration { throw Exception("Unimplemented"); }
  shared actual Kind[] annotatedMemberDeclarations<Kind, Annotation>() 
            given Kind satisfies NestableDeclaration { throw Exception("Unimplemented"); }
  shared actual Annotation[] annotations<out Annotation>()
        given Annotation satisfies MetamodelAnnotation<Annotation> { throw Exception("Unimplemented"); }
  shared actual Kind? getMemberDeclaration<Kind>(String name) 
            given Kind satisfies NestableDeclaration { throw Exception("Unimplemented"); }
  shared actual OpenType openType { throw Exception("Unimplemented"); }
  shared actual TypeParameter[] typeParameterDeclarations { throw Exception("Unimplemented"); }
  shared actual TypeParameter? getTypeParameterDeclaration(String name) { throw Exception("Unimplemented"); }

  shared actual OpenClassType? extendedType { throw Exception("Unimplemented"); }
  shared actual OpenInterfaceType[] satisfiedTypes { throw Exception("Unimplemented"); }

  shared actual Boolean actual { throw Exception("Unimplemented"); }
  shared actual Boolean formal { throw Exception("Unimplemented"); }
  shared actual Boolean default { throw Exception("Unimplemented"); }
  shared actual Boolean shared { throw Exception("Unimplemented"); }
  shared actual Boolean toplevel  { throw Exception("Unimplemented"); }
  shared actual String qualifiedName { return "``containingPackage.name``::``name``"; }
  shared actual NestableDeclaration|Package container { throw Exception("unimplemented"); }
  shared actual Module containingModule => containingPackage.container;

  shared actual OpenType[] caseTypes { throw Exception("Unimplemented"); }

  shared actual Boolean isAlias { throw Exception("Unimplemented"); }
}


class FreeClass(declaration)
        satisfies OpenClassType {

    shared actual ClassDeclaration declaration;
    shared actual OpenClassType? extendedType { throw Exception("unimplemented"); }
    shared actual OpenInterfaceType[] satisfiedTypes { throw Exception("unimplemented"); }
    shared actual Map<TypeParameter, OpenType> typeArguments { throw Exception("unimplemented"); }
}

class FreeInterfaceType(declaration)
        satisfies OpenInterfaceType {

    shared actual InterfaceDeclaration declaration;
    shared actual OpenClassType? extendedType { throw Exception("unimplemented"); }
    shared actual OpenInterfaceType[] satisfiedTypes { throw Exception("unimplemented"); }
    shared actual Map<TypeParameter, OpenType> typeArguments { throw Exception("unimplemented"); }
}

class FunParamDecl() satisfies FunctionDeclaration {
  shared actual Boolean parameter=true;
  shared actual Boolean defaulted { throw Exception("IMPL defaulted"); }
  shared actual Boolean variadic { throw Exception("IMPL variadic"); }

  shared actual Package|NestableDeclaration container { throw Exception("IMPL container"); }
  shared actual Package containingPackage { throw Exception("IMPL containingPackage"); }
  shared actual Module containingModule { throw Exception("IMPL containingModule"); }
  shared actual OpenType openType { throw Exception("IMPL openType"); }
  shared actual Boolean annotation=false;
  shared actual Boolean shared=false;
  shared actual Boolean toplevel=false;
  shared actual Boolean formal=false;
  shared actual Boolean default=false;
  shared actual Boolean actual=false;
  shared actual String qualifiedName { throw Exception("IMPL qualifiedName"); }
  shared actual String name {throw Exception("IMPL name"); }

  shared actual TypeParameter[] typeParameterDeclarations { throw Exception("IMPL typeParameterDeclarations"); }
  shared actual TypeParameter? getTypeParameterDeclaration(String name) { throw Exception("IMPL getTypeParameterDeclaration()"); }
  shared actual Annotation[] annotations<out Annotation>()
    given Annotation satisfies AnnotationType { throw Exception("IMPL annotations()"); }

  shared actual FunctionOrValueDeclaration[] parameterDeclarations { throw Exception("IMPL parameterDeclarations"); }
  shared actual FunctionOrValueDeclaration? getParameterDeclaration(String name) { throw Exception("IMPL getParameterDeclaration()"); }
  shared actual Function<Return, Arguments> apply<Return=Anything, Arguments=Nothing>(AppliedType<Anything>* typeArguments)
    given Arguments satisfies Anything[] { throw Exception("IMPL apply"); }
  shared actual Method<Container, Return, Arguments> memberApply<Container=Nothing, Return=Anything, Arguments=Nothing>(AppliedType<Container> containerType, AppliedType<Anything>* typeArguments)
    given Arguments satisfies Anything[] { throw Exception("IMPL memberApply"); }
}

class ValParamDecl() satisfies ValueDeclaration {
  shared actual Boolean parameter=true;
  shared actual Boolean defaulted { throw Exception("IMPL defaulted"); }
  shared actual Boolean variadic { throw Exception("IMPL variadic"); }
  shared actual Boolean variable { throw Exception("IMPL variable"); }

  shared actual Package|NestableDeclaration container { throw Exception("IMPL container"); }
  shared actual Package containingPackage { throw Exception("IMPL containingPackage"); }
  shared actual Module containingModule { throw Exception("IMPL containingModule"); }
  shared actual OpenType openType { throw Exception("IMPL openType"); }
  shared actual Boolean shared=false;
  shared actual Boolean toplevel=false;
  shared actual Boolean formal=false;
  shared actual Boolean default=false;
  shared actual Boolean actual=false;
  shared actual String qualifiedName { throw Exception("IMPL qualifiedName"); }
  shared actual String name {throw Exception("IMPL name"); }
  shared actual Annotation[] annotations<out Annotation>()
    given Annotation satisfies AnnotationType { throw Exception("IMPL annotations()"); }

  shared actual Value<Type> apply<Type=Anything>() { throw Exception("IMPL apply"); }
  shared actual Attribute<Container, Type> memberApply<Container=Nothing, Type=Anything>(AppliedType<Container> containerType) { throw Exception("IMPL memberApply"); }
}

native class Mapita<out V>() satisfies Map<TypeParameter,V>
    given K satisfies Object
    given V satisfies Object {

  shared actual Boolean equals(Object other) => (super of Map<TypeParameter,V>).equals(other);
  shared actual Integer hash => (super of Map<TypeParameter,V>).hash;
  shared actual Mapita<V> clone() => this;
  shared actual Iterator<TypeParameter->V> iterator() {
    object miter satisfies Iterator<TypeParameter->V> {
      value keys={1,2,3}.sequence;
      variable value idx=-1;
      shared actual <TypeParameter->V>|Finished next() {
        idx++;
        if (exists k=keys[idx]) {
          return nothing;
        }
        return finished;
      }
    }
    return miter;
  }
  shared native actual V get(Object k);
}
